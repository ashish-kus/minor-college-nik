#!/usr/bin/env bash

# shellcheck disable=SC2046
# shellcheck disable=SC2034
PROJECT_ROOT="$(dirname $(dirname $(realpath "$0")))" # Not the src directory but the root directory
UTILS_DIR="$PROJECT_ROOT/src/utils"
LOG_DIR="$PROJECT_ROOT/logs"
LOG_FILE="$(date +%Y-%m-%d_%H-%M-%S).log"


declare JSON_DATA

VERBOSE=false

# shellcheck disable=SC1091
source "$UTILS_DIR/functions"

# shellcheck disable=SC1091
source "$UTILS_DIR/check"

# shellcheck disable=SC1091
source "$UTILS_DIR/fetcher"

function getArgs() {
	while [[ $# -gt 0 ]]; do
		case "$1" in
		-v | --verbose)
			VERBOSE=true
			shift
			;;
		-c | --check)
			VERBOSE=true
			checkDep
			shift
			exit
			;;
		-h | --help)
			help
			shift
			exit
			;;
		*)
			help
			shift
			exit 1
			;;
		esac
	done
}

help() {
	echo "Usage: $0 [OPTIONS]"
	echo "Options:"
	echo "  -v, --verbose    Enable verbose mode"
	echo "  -c, --check      Check dependencies"
}

performChecks() {
	log ":: Checking dependencies"
	if ! checkDep; then
		flog "Please install the missing dependencies"
		exit 1
	fi
	log ""
	log ":: Checking root previleges"
	if ! checkRoot; then
		flog "Please run this script as root"
		exit 1
	else
		log $(ok "Running as root")
	fi
}

main() {
	getArgs "$@"
	performChecks
	getFullDataJson
  log ":: Testing JSON data integrity"  
	if isJson "$JSON_DATA"; then
		log "$(ok "Generated a valid JSON data")"
		echo "$(echo $JSON_DATA | jq)" >"$PROJECT_ROOT/data.json"
	else
		flog "$(err "Generated JSON data is invalid\nCheck Logs $LOG_DIR/$LOG_FILE")"
		exit 1
	fi
}

main "$@"
