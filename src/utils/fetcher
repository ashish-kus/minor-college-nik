#!/usr/bin/env bash

declare CPU_DATA
declare DMI_DATA

# This script is used to check and fetch all the cpu related information like vulnerabilities and all stuff
# This script is only for linux based systems
function getCPUInfo() {
	# This function is used to check the cpu vulnerabilities
	local length
	local data

	data="$(lscpu -J)"
	length="$(echo "$data" | jq '.lscpu | length')"
	CPU_DATA="{"

	for ((i = 0; i < length; i++)); do
		key="$(
			echo "$data" |
				jq ".lscpu[$i].field" |
				tr -d ':' | tr -d '"'
		)"
		value="$(
			echo "$data" |
				jq ".lscpu[$i].data"
		)"
		CPU_DATA="$CPU_DATA\"$key\":$value,"
	done
	CPU_DATA="${CPU_DATA::-1}}"
}

function getDMIInfo() {
	# This function is used to check the cpu vulnerabilities
	data="$(dmidecode | jc --dmidecode)"

	DMI_DATA="{"

	dmiCPU="$(
		echo "$data" |
			jq '[.[] | select(.description == "Processor Information")][0]'
	)"
	dmiBIOS="$(
		echo "$data" |
			jq '[.[] | select(.description == "BIOS Information")][0]'
	)"
	dmiSystem="$(
		echo "$data" |
			jq '[.[] | select(.description == "System Information")][0]'
	)"

	DMI_DATA="$DMI_DATA\"cpu\":$dmiCPU,"
	DMI_DATA="$DMI_DATA\"bios\":$dmiBIOS,"
	DMI_DATA="$DMI_DATA\"system\":$dmiSystem"

	DMI_DATA="$DMI_DATA}"
}

function getFullDataJson() {
	JSON_DATA="{"

	log ""
	log ":: Generating CPU data"
	getCPUInfo
	if isJson "$CPU_DATA"; then
		log "$(ok "Generated a valid CPU data")"
		JSON_DATA="$JSON_DATA\"cpu\":$CPU_DATA,"
	else
		flog "$(err "Genrated CPU data is invalid check manually using command \`lscpu -J\`")"
		exit 1
	fi

	log ""
	log ":: Generating DMI data"
	getDMIInfo
	if isJson "$DMI_DATA"; then
		log "$(ok "Generated a valid DMI data")"
		JSON_DATA="$JSON_DATA\"dmi\":$DMI_DATA"
	else
		flog "$(err "Genrated DMI data is invalid check manually using command \`sudo dmidecode | jc --dmidecode\`")"
		exit 1
	fi

  log ""
  log ":: Compiling all data in one json"
	JSON_DATA="$JSON_DATA}"
}
